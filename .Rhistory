install.packages(c("usethis", "desc", "pkgload"))
usethis::use_version("0.1.0")
devtools::document()
devtools::install()
read.dcf("DESCRIPTION")[,"Version"]  # Should return "0.1.0"
unlink("DESCRIPTION")  # Delete old file
usethis::use_description()  # Create new minimal DESCRIPTION
unlink("README.Rmd")
usethis::use_readme_rmd()  # Let usethis recreate it
desc::desc_valid()  # Should return TRUE
numeric_version(desc::desc_get_version())  # Should return '0.1.0'
devtools::session_info()
desc::desc_set_version("0.1.0")
knitr::opts_chunk$set(
collapse = TRUE,
comment = "#>",
fig.path = "man/figures/README-",
out.width = "100%"
)
knit_with_parameters("C:/Users/losen002/OneDrive - Universiteit Utrecht/Desktop/PhD/BayeSSD/README.Rmd")
packageVersion("knitr")
install.packages("knitr")
install.packages("knitr")
usethis::use_mit_license()
usethis::use_r("getbf")
usethis::use_roxygen_md()
Insert Roxygen Skeleton
Code > Insert Roxygen Skeleton
devtools::document()
devtools::document()
library(BayeSSD)
install.packages("xfun")
install.packages("xfun")
?getbf_mis_mv
?getbf_mis_mv
usethis::use_r("survival")
devtools::document()
# Define distribution functions
dist_functions <- list(
weibull = function(pars, time) {
if (length(pars) < 2) stop("Weibull needs omega, gamma")
(1-pars[1])^(time^pars[2])
},
modified-weibull = function(pars, time) {
if (length(pars) < 3) stop("Modified Weibull needs omega, gamma, kappa")
(exp(time^pars[2]*exp(pars[3]*(time-1))*log(1-pars[1])))
},
linear-exponential = function(pars, time) {
if (length(pars) < 2) stop("Linear-exponential needs omega, gamma")
(exp((.5*pars[2]+log(1-pars[1]))*time - .5*pars[2]*time^2))
},
log-slogistic = function(pars, time) {
if (length(pars) < 2) stop("Log-logistic needs omega, gamma")
(1-pars[1])/((1-pars[1]) + pars[1]*time^pars[2])
},
gompertz = function(pars, time) {
if (length(pars) < 2) stop("Gompertz needs omega, gamma")
exp((log(1-pars[1])/(exp(pars[2])-1))*(exp(pars[2]*time)-1))
},
nonparametric = function(pars, time) {
if (time[1] == 0) {
if (length(pars) < max(time)+1) stop("Need ", max(time)+1, " params for t=0 start")
pars
} else {
if (length(pars) < max(time)) stop("Need ", max(time), " params for t=1 start")
pars
}
}
)
# Define distribution functions
dist_functions <- list(
weibull = function(pars, time) {
if (length(pars) < 2) stop("Weibull needs omega, gamma")
(1-pars[1])^(time^pars[2])
},
modified-weibull = function(pars, time) {
if (length(pars) < 3) stop("Modified Weibull needs omega, gamma, kappa")
(exp(time^pars[2]*exp(pars[3]*(time-1))*log(1-pars[1])))
},
linear-exponential = function(pars, time) {
if (length(pars) < 2) stop("Linear-exponential needs omega, gamma")
(exp((.5*pars[2]+log(1-pars[1]))*time - .5*pars[2]*time^2))
},
log-slogistic = function(pars, time) {
if (length(pars) < 2) stop("Log-logistic needs omega, gamma")
(1-pars[1])/((1-pars[1]) + pars[1]*time^pars[2])
},
gompertz = function(pars, time) {
if (length(pars) < 2) stop("Gompertz needs omega, gamma")
exp((log(1-pars[1])/(exp(pars[2])-1))*(exp(pars[2]*time)-1))
},
nonparametric = function(pars, time) {
if (time[1] == 0) {
if (length(pars) < max(time)+1) stop("Need ", max(time)+1, " params for t=0 start")
pars
} else {
if (length(pars) < max(time)) stop("Need ", max(time), " params for t=1 start")
pars
}
}
)
list(
weibull = function(pars, time) {
if (length(pars) < 2) stop("Weibull needs omega, gamma")
(1-pars[1])^(time^pars[2])
},
modified-weibull = function(pars, time) {
if (length(pars) < 3) stop("Modified Weibull needs omega, gamma, kappa")
(exp(time^pars[2]*exp(pars[3]*(time-1))*log(1-pars[1])))
},
linear-exponential = function(pars, time) {
if (length(pars) < 2) stop("Linear-exponential needs omega, gamma")
(exp((.5*pars[2]+log(1-pars[1]))*time - .5*pars[2]*time^2))
},
log-slogistic = function(pars, time) {
if (length(pars) < 2) stop("Log-logistic needs omega, gamma")
(1-pars[1])/((1-pars[1]) + pars[1]*time^pars[2])
},
gompertz = function(pars, time) {
if (length(pars) < 2) stop("Gompertz needs omega, gamma")
exp((log(1-pars[1])/(exp(pars[2])-1))*(exp(pars[2]*time)-1))
},
nonparametric = function(pars, time) {
if (time[1] == 0) {
if (length(pars) < max(time)+1) stop("Need ", max(time)+1, " params for t=0 start")
pars
} else {
if (length(pars) < max(time)) stop("Need ", max(time), " params for t=1 start")
pars
}
}
)
# Define distribution functions
dist_functions <- list(
weibull = function(pars, time) {
if (length(pars) < 2) stop("Weibull needs omega, gamma")
(1-pars[1])^(time^pars[2])
},
modified-weibull = function(pars, time) {
if (length(pars) < 3) stop("Modified Weibull needs omega, gamma, kappa")
(exp(time^pars[2]*exp(pars[3]*(time-1))*log(1-pars[1])))
},
linear-exponential = function(pars, time) {
if (length(pars) < 2) stop("Linear-exponential needs omega, gamma")
(exp((.5*pars[2]+log(1-pars[1]))*time - .5*pars[2]*time^2))
},
log-slogistic = function(pars, time) {
if (length(pars) < 2) stop("Log-logistic needs omega, gamma")
(1-pars[1])/((1-pars[1]) + pars[1]*time^pars[2])
},
gompertz = function(pars, time) {
if (length(pars) < 2) stop("Gompertz needs omega, gamma")
exp((log(1-pars[1])/(exp(pars[2])-1))*(exp(pars[2]*time)-1))
},
nonparametric = function(pars, time) {
if (time[1] == 0) {
if (length(pars) < max(time)+1) stop("Need ", max(time)+1, " params for t=0 start")
pars
} else {
if (length(pars) < max(time)) stop("Need ", max(time), " params for t=1 start")
pars
}
}
)
# Define distribution functions
dist_functions <- list(
weibull = function(pars, time) {
if (length(pars) < 2) stop("Weibull needs omega, gamma")
1-pars[1])^(time^pars[2]
},
modified-weibull = function(pars, time) {
if (length(pars) < 3) stop("Modified Weibull needs omega, gamma, kappa")
exp(time^pars[2]*exp(pars[3]*(time-1))*log(1-pars[1]))
},
linear-exponential = function(pars, time) {
if (length(pars) < 2) stop("Linear-exponential needs omega, gamma")
exp((.5*pars[2]+log(1-pars[1]))*time - .5*pars[2]*time^2)
},
log-slogistic = function(pars, time) {
if (length(pars) < 2) stop("Log-logistic needs omega, gamma")
(1-pars[1])/((1-pars[1]) + pars[1]*time^pars[2])
},
gompertz = function(pars, time) {
if (length(pars) < 2) stop("Gompertz needs omega, gamma")
exp((log(1-pars[1])/(exp(pars[2])-1))*(exp(pars[2]*time)-1))
},
nonparametric = function(pars, time) {
if (time[1] == 0) {
if (length(pars) < max(time)+1) stop("Need ", max(time)+1, " params for t=0 start")
pars
} else {
if (length(pars) < max(time)) stop("Need ", max(time), " params for t=1 start")
pars
}
}
)
# Define distribution functions
dist_functions <- list(
weibull = function(pars, time) {
if (length(pars) < 2) stop("Weibull needs omega, gamma")
(1-pars[1])^(time^pars[2])
},
modified-weibull = function(pars, time) {
if (length(pars) < 3) stop("Modified Weibull needs omega, gamma, kappa")
exp(time^pars[2]*exp(pars[3]*(time-1))*log(1-pars[1]))
},
linear-exponential = function(pars, time) {
if (length(pars) < 2) stop("Linear-exponential needs omega, gamma")
exp((.5*pars[2]+log(1-pars[1]))*time - .5*pars[2]*time^2)
},
log-slogistic = function(pars, time) {
if (length(pars) < 2) stop("Log-logistic needs omega, gamma")
(1-pars[1])/((1-pars[1]) + pars[1]*time^pars[2])
},
gompertz = function(pars, time) {
if (length(pars) < 2) stop("Gompertz needs omega, gamma")
exp((log(1-pars[1])/(exp(pars[2])-1))*(exp(pars[2]*time)-1))
},
nonparametric = function(pars, time) {
if (time[1] == 0) {
if (length(pars) < max(time)+1) stop("Need ", max(time)+1, " params for t=0 start")
pars
} else {
if (length(pars) < max(time)) stop("Need ", max(time), " params for t=1 start")
pars
}
}
)
# Define distribution functions
dist_functions <- list(
weibull = function(pars, time) {
if (length(pars) < 2) stop("Weibull needs omega, gamma")
(1-pars[1])^(time^pars[2])
}),
modified-weibull = function(pars, time) {
if (length(pars) < 3) stop("Modified Weibull needs omega, gamma, kappa")
exp(time^pars[2]*exp(pars[3]*(time-1))*log(1-pars[1]))
},
linear-exponential = function(pars, time) {
if (length(pars) < 2) stop("Linear-exponential needs omega, gamma")
exp((.5*pars[2]+log(1-pars[1]))*time - .5*pars[2]*time^2)
},
log-slogistic = function(pars, time) {
if (length(pars) < 2) stop("Log-logistic needs omega, gamma")
(1-pars[1])/((1-pars[1]) + pars[1]*time^pars[2])
},
gompertz = function(pars, time) {
if (length(pars) < 2) stop("Gompertz needs omega, gamma")
exp((log(1-pars[1])/(exp(pars[2])-1))*(exp(pars[2]*time)-1))
},
nonparametric = function(pars, time) {
if (time[1] == 0) {
if (length(pars) < max(time)+1) stop("Need ", max(time)+1, " params for t=0 start")
pars
} else {
if (length(pars) < max(time)) stop("Need ", max(time), " params for t=1 start")
pars
}
}
dist_functions
# Define distribution functions
dist_functions <- list(
weibull = function(pars, time) {
if (length(pars) < 2) stop("Weibull needs omega, gamma")
(1-pars[1])^(time^pars[2])
}),
modified-weibull = function(pars, time) {
if (length(pars) < 3) stop("Modified Weibull needs omega, gamma, kappa")
exp(time^pars[2]*exp(pars[3]*(time-1))*log(1-pars[1]))
},
linear-exponential = function(pars, time) {
if (length(pars) < 2) stop("Linear-exponential needs omega, gamma")
exp((.5*pars[2]+log(1-pars[1]))*time - .5*pars[2]*time^2)
},
log-slogistic = function(pars, time) {
if (length(pars) < 2) stop("Log-logistic needs omega, gamma")
(1-pars[1])/((1-pars[1]) + pars[1]*time^pars[2])
},
gompertz = function(pars, time) {
if (length(pars) < 2) stop("Gompertz needs omega, gamma")
exp((log(1-pars[1])/(exp(pars[2])-1))*(exp(pars[2]*time)-1))
},
nonparametric = function(pars, time) {
if (time[1] == 0) {
if (length(pars) < max(time)+1) stop("Need ", max(time)+1, " params for t=0 start")
pars
} else {
if (length(pars) < max(time)) stop("Need ", max(time), " params for t=1 start")
pars
}
}
dist_functions <- list(
weibull = function(pars, time) {
if (length(pars) < 2) stop("Weibull needs omega, gamma")
(1-pars[1])^(time^pars[2])
})
dist_functions
dist_functions <- list(
weibull = function(pars, time) {
if (length(pars) < 2) stop("Weibull needs omega, gamma")
(1-pars[1])^(time^pars[2])
},
modified-weibull = function(pars, time) {
if (length(pars) < 3) stop("Modified Weibull needs omega, gamma, kappa")
exp(time^pars[2]*exp(pars[3]*(time-1))*log(1-pars[1]))
})
dist_functions <- list(
weibull = function(pars, time) {
if (length(pars) < 2) stop("Weibull needs omega, gamma")
(1-pars[1])^(time^pars[2])
},
# modified-weibull = function(pars, time) {
#   if (length(pars) < 3) stop("Modified Weibull needs omega, gamma, kappa")
#   exp(time^pars[2]*exp(pars[3]*(time-1))*log(1-pars[1]))
# },
linear-exponential = function(pars, time) {
if (length(pars) < 2) stop("Linear-exponential needs omega, gamma")
exp((.5*pars[2]+log(1-pars[1]))*time - .5*pars[2]*time^2)
})
dist_functions <- list(
weibull = function(pars, time) {
if (length(pars) < 2) stop("Weibull needs omega, gamma")
(1-pars[1])^(time^pars[2])
},
modified-weibull = function(pars, time) {
if (length(pars) < 3) stop("Modified Weibull needs omega, gamma, kappa")
exp(time^pars[2]*exp(pars[3]*(time-1))*log(1-pars[1]))
},
linear-exponential = function(pars, time) {
if (length(pars) < 2) stop("Linear-exponential needs omega, gamma")
exp((.5*pars[2]+log(1-pars[1]))*time - .5*pars[2]*time^2)
},
log-slogistic = function(pars, time) {
if (length(pars) < 2) stop("Log-logistic needs omega, gamma")
(1-pars[1])/((1-pars[1]) + pars[1]*time^pars[2])
},
gompertz = function(pars, time) {
if (length(pars) < 2) stop("Gompertz needs omega, gamma")
exp((log(1-pars[1])/(exp(pars[2])-1))*(exp(pars[2]*time)-1))
},
nonparametric = function(pars, time) {
if (time[1] == 0) {
if (length(pars) < max(time)+1) stop("Need ", max(time)+1, " params for t=0 start")
pars
} else {
if (length(pars) < max(time)) stop("Need ", max(time), " params for t=1 start")
pars
}
}
)
# Define distribution functions
dist_functions <- list(
weibull = function(pars, time) {
if (length(pars) < 2) stop("Weibull needs omega, gamma")
(1-pars[1])^(time^pars[2])
},
modified_weibull = function(pars, time) {
if (length(pars) < 3) stop("Modified Weibull needs omega, gamma, kappa")
exp(time^pars[2]*exp(pars[3]*(time-1))*log(1-pars[1]))
},
linear_exponential = function(pars, time) {
if (length(pars) < 2) stop("Linear-exponential needs omega, gamma")
exp((.5*pars[2]+log(1-pars[1]))*time - .5*pars[2]*time^2)
},
log_logistic = function(pars, time) {
if (length(pars) < 2) stop("Log-logistic needs omega, gamma")
(1-pars[1])/((1-pars[1]) + pars[1]*time^pars[2])
},
gompertz = function(pars, time) {
if (length(pars) < 2) stop("Gompertz needs omega, gamma")
exp((log(1-pars[1])/(exp(pars[2])-1))*(exp(pars[2]*time)-1))
},
nonparametric = function(pars, time) {
if (time[1] == 0) {
if (length(pars) < max(time)+1) stop("Need ", max(time)+1, " params for t=0 start")
pars
} else {
if (length(pars) < max(time)) stop("Need ", max(time), " params for t=1 start")
pars
}
}
)
devtools::document()
usethis::use_r("get_neff")
devtools::document()
install.packages("brio")
devtools::document()
devtools::document()
usethis::user("get_power")
usethis::use_r("get_power")
usethis::use_r("BayeSSD")
devtools::document()
detach("package:BayeSSD", unload = TRUE)
remove.packages("BayeSSD")
remove.packages("BayeSSD")  # Remove if already installe
install.packages(
"C:/Users/losen002/OneDrive - Universiteit Utrecht/Desktop/PhD/BayeSSD/BayeSSD.tar.gz",  # Replace with your package .tar.gz path
repos = NULL,
type = "source",
INSTALL_opts = "--no-lock"  # Disable file locking
)
library(BayeSSD)
detach("package:BayeSSD", unload = TRUE)
remove.packages("BayeSSD", lib="~/R/win-library/3.0")
devtools::document()
devtools::build()
library(BayeSSD)
devtools::document()
?getbf_mis_mv
remove.packages("BayeSSD")
unlink("~/R/win-library/3.0/BayeSSD", recursive = TRUE)  # Manual cleanup
unlink("~/R/win-library/3.0/00LOCK-BayeSSD", recursive = TRUE)
